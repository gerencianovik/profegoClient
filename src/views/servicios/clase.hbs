<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestor de Clases Interactivo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #147582;
            --secondary-color: #28a745;
            --accent-color: #ff6b6b;
            --light-bg: #fff9f0;
            --dark-text: white;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--light-bg);
            color: #215d56;
            overflow-x: hidden;
        }

        .floating-shapes {
            position: fixed;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
        }

        .floating-shapes div {
            position: absolute;
            background: rgba(236, 146, 47, 0.1);
            border-radius: 50%;
            animation: float 15s infinite linear;
        }

        .main-header {
            background: linear-gradient(135deg, var(--primary-color), #0d5c68);
            padding: 1rem 0;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            position: relative;
        }

        .page-title {
            color: white;
            font-weight: 800;
            font-size: 2rem;
        }

        .filter-section {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            margin: 1.5rem auto;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .filter-group {
            margin-bottom: 1rem;
        }

        .filter-group-title {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .filter-checkbox {
            display: none;
        }

        .filter-label {
            padding: 0.5rem 1rem;
            background: #f8f9fa;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.9rem;
        }

        .filter-checkbox:checked+.filter-label {
            background: var(--primary-color);
            color: white;
        }

        .map-container {
            height: 300px;
            border-radius: 12px;
            overflow: hidden;
            margin-bottom: 1rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        #locationMap {
            width: 100%;
            height: 100%;
        }

        .class-card {
            background: white;
            border-radius: 15px;
            margin: 1rem 0;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        #tarjetaCompleta {
            background: var(--primary-color);
            padding: 1rem;
            position: relative;
        }

        .image-section {
            width: 100%;
            height: 200px;
            border-radius: 12px;
            overflow: hidden;
            position: relative;
        }

        .class-image {
            width: 100%;
            height: auto;
            object-fit: cover;
            border-radius: 20px;
        }

        .status-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            padding: 6px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            z-index: 2;
        }

        .active {
            background: #28a745;
        }

        .inactive {
            background: #dc3545;
        }

        .content-section {
            overflow-y: auto;
            padding-right: 8px;
            scrollbar-width: thin;
            scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
        }

        .content-section::-webkit-scrollbar {
            width: 4px;
        }

        .content-section::-webkit-scrollbar-track {
            background: transparent;
        }

        .content-section::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 2px;
        }

        .content-section::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }

        .class-title {
            color: var(--dark-text);
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }

        .class-description {
            color: var(--dark-text);
            font-size: 1rem;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            max-height: 4.5em;
            line-height: 1.5em;
        }

        .class-meta {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 0.8rem;
        }

        .meta-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.8rem;
            border-radius: 8px;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: white;
        }

        .video-section {
            padding: 1rem;
            background: #f8f9fa;
        }

        .video-container {
            width: 100%;
            height: auto;
            border-radius: 12px;
            overflow: hidden;
        }

        .class-video {
            width: 100%;
            height: auto;
            object-fit: cover;
            border-radius: 20px;
        }

        #botonesTarjeta {
            margin-top: 1rem;
            display: flex;
            gap: 0.8rem;
            flex-wrap: wrap;
            position: absolute;
            bottom: 0%;
            width: 100%;
            background-color: white;
            left: 0%;
            padding: 5%
        }

        .btn-action {
            padding: 8px 16px;
            font-size: 0.9rem;
            color: white;
            border: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(to left, #177483 10%, #004D77 100%);
        }

        .btn-danger {
            background: linear-gradient(to left, #FD2E00 10%, #F39325 100%);
        }

        .btn-success {
            background: #28a745;
        }

        .btn-secondary-custom {
            background: #18574F;
            color: white;
        }

        #descripcionCompleta {
            text-align: center;
            margin-top: 1rem;
        }

        .nee-badge {
            background-color: #6c757d;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }

        @media (min-width: 768px) {
            .filter-container {
                display: grid;
                grid-template-columns: 300px 1fr;
                gap: 1.5rem;
            }

            .class-card {
                display: flex;
                min-height: 350px;
            }

            #tarjetaCompleta {
                flex: 0 0 65%;
                display: flex;
                gap: 1.5rem;
                padding: 1.5rem;
            }

            .image-section {
                width: 40%;
                height: auto;
            }

            .content-section {
                flex: 1;
                padding: 0;
            }

            .video-section {
                flex: 0 0 35%;
                padding: 1.5rem;
            }

            .class-title {
                font-size: 1.8rem;
            }
        }

        @media (max-width: 767px) {
            .main-header {
                padding: 0.5rem 0;
            }

            .page-title {
                font-size: 1.5rem;
            }

            .filter-section .row {
                flex-wrap: nowrap;
                overflow-x: auto;
                padding-bottom: 0.5rem;
            }

            .filter-section .col-md-2 {
                min-width: 140px;
            }

            .meta-item {
                flex-direction: column;
                text-align: center;
            }

            .content-section {
                margin-bottom: 25%;
            }
        }

        @keyframes float {
            0% {
                transform: translateY(0) rotate(0deg);
            }

            50% {
                transform: translateY(-20px) rotate(5deg);
            }

            100% {
                transform: translateY(0) rotate(0deg);
            }
        }
    </style>
</head>

<body>
    <div class="floating-shapes">
        <div style="width: 150px; height: 150px; top: 20%; left: 10%"></div>
        <div style="width: 100px; height: 100px; top: 60%; right: 15%"></div>
    </div>

    <header class="main-header">
        <div class="container">
            <div class="d-flex justify-content-between align-items-center py-2">
                <h1 class="page-title">Clases</h1>
            </div>
        </div>
    </header>

    <main class="container py-3">
        <div class="filter-container">
            <!-- SecciÃ³n de filtros -->
            <div class="filter-section">
                <div class="filter-group">
                    <h5 class="filter-group-title">Tipo de clase</h5>
                    <div class="filter-options">
                        <input type="checkbox" id="individual" class="filter-checkbox">
                        <label for="individual" class="filter-label">Individual</label>

                        <input type="checkbox" id="grupal" class="filter-checkbox">
                        <label for="grupal" class="filter-label">Grupal</label>
                    </div>
                </div>

                <div class="filter-group">
                    <h5 class="filter-group-title">Ãrea o materia</h5>
                    <input type="text" id="areaFilter" class="form-control" placeholder="Ejemplo: MatemÃ¡ticas">
                </div>

                <div class="filter-group">
                    <h5 class="filter-group-title">Nivel educativo</h5>
                    <input type="text" id="nivelFilter" class="form-control" placeholder="Ejemplo: Primaria">
                </div>

                <div class="filter-group">
                    <h5 class="filter-group-title">Â¿DÃ³nde?</h5>
                    <div class="filter-options">
                        <input type="checkbox" id="online" class="filter-checkbox">
                        <label for="online" class="filter-label">Online</label>

                        <input type="checkbox" id="domicilio" class="filter-checkbox">
                        <label for="domicilio" class="filter-label">En mi domicilio</label>

                        <input type="checkbox" id="desplazarme" class="filter-checkbox">
                        <label for="desplazarme" class="filter-label">Puedo desplazarme</label>
                    </div>
                </div>

                <div class="filter-group">
                    <h5 class="filter-group-title">Precio por hora desde</h5>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" id="precioFilter" class="form-control" placeholder="15" min="15">
                        <span class="input-group-text">en adelante</span>
                    </div>
                </div>

                <div class="filter-group">
                    <h5 class="filter-group-title">Disponibilidad</h5>
                    <div class="filter-options">
                        <input type="checkbox" id="manana" class="filter-checkbox">
                        <label for="manana" class="filter-label">MaÃ±ana (06h-13h)</label>

                        <input type="checkbox" id="tarde" class="filter-checkbox">
                        <label for="tarde" class="filter-label">Tarde (13h-20h)</label>

                        <input type="checkbox" id="noche" class="filter-checkbox">
                        <label for="noche" class="filter-label">Noche (20h-06h)</label>

                        <input type="checkbox" id="finde" class="filter-checkbox">
                        <label for="finde" class="filter-label">Fines de semana</label>
                    </div>
                </div>

                <div class="filter-group">
                    <h5 class="filter-group-title">Necesidades Educativas Especiales (NEE)</h5>
                    <div class="filter-options">
                        <input type="checkbox" id="nee" class="filter-checkbox">
                        <label for="nee" class="filter-label">Con NEE</label>
                    </div>
                </div>

                <div class="filter-group">
                    <h5 class="filter-group-title">UbicaciÃ³n</h5>
                    <div class="map-container">
                        <div id="locationMap"></div>
                    </div>
                    <button class="btn btn-primary w-100 mt-2" id="filterLocationBtn">
                        <i class="fas fa-filter"></i> Filtrar por ubicaciÃ³n
                    </button>
                </div>

                <button class="btn btn-primary w-100 mt-3" id="applyFiltersBtn">
                    <i class="fas fa-filter"></i> Aplicar Filtros
                </button>
                <button class="btn btn-outline-secondary w-100 mt-2" id="resetFiltersBtn">
                    <i class="fas fa-sync-alt"></i> Limpiar Filtros
                </button>
            </div>

            <!-- SecciÃ³n de resultados -->
            <div>
                <div class="filter-section">
                    <div class="row g-2">
                        <div class="col-12 col-md-4">
                            <input type="text" id="searchInput" class="form-control" placeholder="ð Buscar...">
                        </div>
                        <div class="col-6 col-md-2">
                            <select class="form-select" id="modalityFilter">
                                <option value="">Modalidad</option>
                                <option value="Online">Online</option>
                                <option value="Presencial">Presencial</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="row" id="classContainer">
                    {{#each clases}}
                    <div class="col-12 class-item" data-id="{{idClases}}" data-name="{{nameClases}}"
                        data-description="{{descriptionClases}}" data-type="{{tipoClases}}"
                        data-modality="{{modalityClases}}" data-status="{{stateClases}}"
                        data-location="{{ubicacionClases}}" data-price="{{costClases}}" data-age="{{rangoEdadClases}}"
                        data-schedule="{{hourClases}}" data-area="{{areaClases}}" data-nivel="{{nivelClases}}"
                        data-online="{{#if (eq modalityClases 'Online')}}true{{else}}false{{/if}}"
                        data-presencial="{{#if (eq modalityClases 'Presencial')}}true{{else}}false{{/if}}"
                        data-domicilio="{{domicilioClases}}" data-nee="{{neeClases}}">
                        <div class="class-card">
                            <div id="tarjetaCompleta">
                                <div class="image-section">
                                    <img src="/img/clase/{{photoClases}}" class="class-image" alt="Imagen de la clase">
                                    <span class="status-badge {{#if stateClases}}active{{else}}inactive{{/if}}">
                                        {{#if stateClases}}Activo{{else}}Inactivo{{/if}}
                                    </span>
                                    {{#if neeClases}}
                                    <span class="status-badge nee-badge">NEE</span>
                                    {{/if}}
                                </div>

                                <div class="content-section">
                                    <h3 class="class-title">{{nameClases}}</h3>
                                    <p class="class-description">
                                        {{truncate descriptionClases 100}}
                                    </p>
                                    <div class="class-meta">
                                        <div class="meta-item">
                                            <i class="fas fa-user"></i>
                                            {{#each ../teacherLista}}
                                            <span>{{completeNmeTeacher}}</span>
                                            {{/each}}
                                        </div>
                                        <div class="meta-item">
                                            <i class="fas fa-chalkboard"></i>
                                            <span>{{tipoClases}}</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="fas fa-calendar-alt"></i>
                                            <span>{{dateClasesInit}}</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="fas fa-users"></i>
                                            <span>{{shareClases}} cupos</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="fas fa-dollar-sign"></i>
                                            <span>${{costClases}}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="video-section">
                                <div class="video-container">
                                    <video class="class-video" src="/video/clases/{{videoClases}}" controls></video>
                                </div>
                                <div id="descripcionCompleta">
                                    <a href="/clases/detailList/{{idClases}}" class="d-block mt-2">
                                        <button class="btn btn-secondary-custom w-100">
                                            Ver informaciÃ³n completa
                                        </button>
                                    </a>
                                    {{#if user}}
                                    {{#isStudentRole user.rolStudent}}
                                    <a href="/reservar/{{idCours}}" class="d-block mt-2">
                                        <button class="btn btn-secondary w-100" style="background-color: #18574F;">
                                            Reservar
                                        </button>
                                    </a>
                                    {{else}}
                                    <p class="text-muted">Solo estudiantes pueden reservar</p>
                                    {{/isStudentRole}}
                                    {{else}}
                                    <a href="/loginStudents" class="d-block mt-2">
                                        <button class="btn btn-secondary w-100" style="background-color: #18574F;">
                                            Reservar
                                        </button>
                                    </a>
                                    {{/if}}
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
        </div>
    </main>

    <!-- Script de Google Maps con carga optimizada -->
    <script>
        // DefiniciÃ³n de variables globales para el mapa
        let map;
        let geocoder;
        let markers = [];
        let locationCircle = null;
        let locationMarker = null;
        let classLocations = [];

        // FunciÃ³n para inicializar el mapa cuando la API estÃ© cargada
        function initMap() {
            // ConfiguraciÃ³n inicial del mapa
            map = new google.maps.Map(document.getElementById("locationMap"), {
                center: { lat: -0.13097336766634235, lng: -78.45333414939553 },
                zoom: 12,
                mapTypeControl: false,
                streetViewControl: false
            });

            geocoder = new google.maps.Geocoder();

            // Procesar ubicaciones de las clases desde Handlebars
            classLocations = [
                {{#each clases}}
                {{#if ubicacionClases}}
                {
                    address: "{{ubicacionClases}}",
                    title: "{{nameClases}}",
                    id: "{{idClases}}"
                },
                {{/if}}
                {{/each}}
            ];

            // Geocodificar y agregar marcadores para cada ubicaciÃ³n
            classLocations.forEach(location => {
                geocodeAddress(location.address, location.title, location.id);
            });

            // Permitir al usuario hacer clic en el mapa para establecer ubicaciÃ³n de filtro
            map.addListener("click", (event) => {
                setFilterLocation(event.latLng);
            });

            // Configurar eventos despuÃ©s de que el mapa estÃ© listo
            setupMapEvents();
        }

        // FunciÃ³n para geocodificar una direcciÃ³n y agregar marcador
        function geocodeAddress(address, title, id) {
            geocoder.geocode({ address: address }, (results, status) => {
                if (status === "OK") {
                    const marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location,
                        title: title,
                        icon: {
                            url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                        },
                        classId: id
                    });

                    // InfoWindow para mostrar detalles al hacer clic
                    const infowindow = new google.maps.InfoWindow({
                        content: `<strong>${title}</strong><br>${address}`
                    });

                    marker.addListener("click", () => {
                        infowindow.open(map, marker);
                    });

                    markers.push(marker);

                    // Ajustar el zoom para mostrar todos los marcadores
                    if (markers.length > 0) {
                        const bounds = new google.maps.LatLngBounds();
                        markers.forEach(marker => {
                            bounds.extend(marker.getPosition());
                        });
                        map.fitBounds(bounds);
                    }
                } else {
                    console.error("Geocode no tuvo Ã©xito por la siguiente razÃ³n: " + status);
                }
            });
        }

        // Establecer ubicaciÃ³n para filtrar
        function setFilterLocation(latLng) {
            // Limpiar marcador y cÃ­rculo anteriores
            if (locationMarker) {
                locationMarker.setMap(null);
            }
            if (locationCircle) {
                locationCircle.setMap(null);
            }

            // Crear nuevo marcador
            locationMarker = new google.maps.Marker({
                position: latLng,
                map: map,
                draggable: true,
                title: "UbicaciÃ³n de filtro",
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png"
                }
            });

            // Crear cÃ­rculo de radio (5km)
            locationCircle = new google.maps.Circle({
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#FF0000",
                fillOpacity: 0.35,
                map: map,
                center: latLng,
                radius: 5000 // 5km en metros
            });

            // Permitir arrastrar el marcador
            locationMarker.addListener("dragend", (event) => {
                locationCircle.setCenter(event.latLng);
            });
        }

        // Filtrar por ubicaciÃ³n
        function filterByLocation() {
            if (!locationMarker) {
                alert("Por favor, selecciona una ubicaciÃ³n en el mapa primero");
                return;
            }

            const center = locationCircle.getCenter();
            const radius = locationCircle.getRadius();

            // Ocultar todas las clases primero
            document.querySelectorAll(".class-item").forEach(item => {
                item.style.display = "none";
            });

            // Mostrar solo las clases cercanas
            markers.forEach(marker => {
                const distance = google.maps.geometry.spherical.computeDistanceBetween(
                    center, 
                    marker.getPosition()
                );
                
                if (distance <= radius) {
                    const classElement = document.querySelector(`.class-item[data-id="${marker.classId}"]`);
                    if (classElement) {
                        classElement.style.display = "block";
                    }
                }
            });
        }

        // Configurar eventos del mapa
        function setupMapEvents() {
            document.getElementById("filterLocationBtn").addEventListener("click", filterByLocation);
        }

        // Asignar initMap al Ã¡mbito global
        window.initMap = initMap;
    </script>

    <!-- Carga de Google Maps API con parÃ¡metros optimizados -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB_Q9PaOYlXpeqtj_0tHE19Zcoim25iSFg&callback=initMap&libraries=places,geometry&v=weekly&loading=async" 
            async defer></script>

    <!-- Script para manejar los filtros -->
    <script>
        // FunciÃ³n para verificar si un valor estÃ¡ en un array
        function isInArray(value, array) {
            return array.length === 0 || array.includes(value);
        }

        // FunciÃ³n para verificar si un texto contiene alguno de los valores
        function containsAny(text, values) {
            if (values.length === 0 || !text) return true;
            return values.some(value => text.toLowerCase().includes(value.toLowerCase()));
        }

        // Aplicar todos los filtros
        function applyFilters() {
            const searchTerm = document.getElementById("searchInput").value.toLowerCase();
            const modalityFilter = document.getElementById("modalityFilter").value;
            const minPrice = parseFloat(document.getElementById("precioFilter").value) || 0;
            const areaFilter = document.getElementById("areaFilter").value.toLowerCase();
            const nivelFilter = document.getElementById("nivelFilter").value.toLowerCase();
            const neeFilter = document.getElementById("nee").checked;

            // Obtener tipos de clase seleccionados
            const classTypes = [];
            if (document.getElementById("individual").checked) classTypes.push("Individual");
            if (document.getElementById("grupal").checked) classTypes.push("Grupal");

            // Obtener modalidades seleccionadas
            const modalities = [];
            if (document.getElementById("online").checked) modalities.push("Online");
            if (document.getElementById("domicilio").checked) modalities.push("Domicilio");
            if (document.getElementById("desplazarme").checked) modalities.push("Desplazarme");

            // Obtener disponibilidades seleccionadas
            const schedules = [];
            if (document.getElementById("manana").checked) schedules.push("MaÃ±ana");
            if (document.getElementById("tarde").checked) schedules.push("Tarde");
            if (document.getElementById("noche").checked) schedules.push("Noche");
            if (document.getElementById("finde").checked) schedules.push("Fin de semana");

            document.querySelectorAll(".class-item").forEach(card => {
                const name = card.dataset.name.toLowerCase();
                const description = card.dataset.description.toLowerCase();
                const modality = card.dataset.modality;
                const price = parseFloat(card.dataset.price) || 0;
                const type = card.dataset.type;
                const schedule = card.dataset.schedule;
                const area = card.dataset.area ? card.dataset.area.toLowerCase() : "";
                const nivel = card.dataset.nivel ? card.dataset.nivel.toLowerCase() : "";
                const nee = card.dataset.nee === "true";
                const isOnline = card.dataset.online === "true";
                const isPresencial = card.dataset.presencial === "true";
                const isDomicilio = card.dataset.domicilio === "true";

                // Aplicar todos los filtros
                const matchesSearch = searchTerm === "" ||
                    name.includes(searchTerm) ||
                    description.includes(searchTerm);

                const matchesModality = modalityFilter === "" || modality === modalityFilter;
                const matchesPrice = price >= minPrice;
                const matchesType = classTypes.length === 0 || classTypes.includes(type);
                const matchesSchedule = schedules.length === 0 || containsAny(schedule, schedules);
                const matchesArea = areaFilter === "" || area.includes(areaFilter);
                const matchesNivel = nivelFilter === "" || nivel.includes(nivelFilter);
                const matchesNEE = !neeFilter || nee;

                // Verificar modalidades (online, domicilio, desplazarse)
                let matchesModalities = true;
                if (modalities.length > 0) {
                    matchesModalities = false;
                    if ((modalities.includes("Online") && isOnline)) matchesModalities = true;
                    if ((modalities.includes("Domicilio") && isDomicilio)) matchesModalities = true;
                    if ((modalities.includes("Desplazarme") && isPresencial)) matchesModalities = true;
                }

                // Mostrar u ocultar segÃºn coincidan todos los filtros
                card.style.display = (matchesSearch && matchesModality &&
                    matchesPrice && matchesType && matchesSchedule &&
                    matchesArea && matchesNivel && matchesModalities && matchesNEE) ? "block" : "none";
            });
        }

        // Resetear todos los filtros
        function resetFilters() {
            // Limpiar campos de texto
            document.getElementById("searchInput").value = "";
            document.getElementById("modalityFilter").value = "";
            document.getElementById("areaFilter").value = "";
            document.getElementById("nivelFilter").value = "";
            document.getElementById("precioFilter").value = "";

            // Desmarcar checkboxes
            document.querySelectorAll(".filter-checkbox").forEach(checkbox => {
                checkbox.checked = false;
            });

            // Limpiar mapa de filtro
            if (locationMarker) locationMarker.setMap(null);
            if (locationCircle) locationCircle.setMap(null);

            // Mostrar todas las clases
            document.querySelectorAll(".class-item").forEach(item => {
                item.style.display = "block";
            });
        }

        // Inicializar eventos cuando el DOM estÃ© listo
        document.addEventListener("DOMContentLoaded", function() {
            // Eventos para los filtros
            document.getElementById("searchInput").addEventListener("input", applyFilters);
            document.getElementById("modalityFilter").addEventListener("change", applyFilters);
            document.getElementById("areaFilter").addEventListener("input", applyFilters);
            document.getElementById("nivelFilter").addEventListener("input", applyFilters);
            document.getElementById("precioFilter").addEventListener("input", applyFilters);

            document.querySelectorAll(".filter-checkbox").forEach(checkbox => {
                checkbox.addEventListener("change", applyFilters);
            });

            // Eventos para los botones de acciÃ³n
            document.getElementById("applyFiltersBtn").addEventListener("click", applyFilters);
            document.getElementById("resetFiltersBtn").addEventListener("click", resetFilters);
        });
    </script>
</body>
</html>